name: Check for ksr-cli updates

on:
  schedule:
    # Run daily at 8:00 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run (no PR creation)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-ksr-cli-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current ksr-cli version
        id: current-version
        run: |
          # Extract current version from action.yml
          CURRENT_VERSION=$(grep -A1 "cli-version:" action.yml | grep "default:" | sed "s/.*default: '\(.*\)'/\1/")
          echo "Current ksr-cli version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Get latest ksr-cli version
        id: latest-version
        run: |
          # Fetch latest release from ksr-cli repository
          LATEST_VERSION=$(curl -s https://api.github.com/repos/aywengo/ksr-cli/releases/latest | jq -r '.tag_name')
          echo "Latest ksr-cli version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Get release notes
          RELEASE_NOTES=$(curl -s https://api.github.com/repos/aywengo/ksr-cli/releases/latest | jq -r '.body')
          echo "Release notes:"
          echo "$RELEASE_NOTES"
          
          # Save release notes to file for later use
          echo "$RELEASE_NOTES" > release-notes.txt

      - name: Compare versions
        id: compare
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          LATEST="${{ steps.latest-version.outputs.version }}"
          
          if [ "$CURRENT" = "$LATEST" ]; then
            echo "ksr-cli is up to date ($CURRENT)"
            echo "needs-update=false" >> $GITHUB_OUTPUT
          else
            echo "ksr-cli can be updated from $CURRENT to $LATEST"
            echo "needs-update=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR or Issue
        if: steps.compare.outputs.needs-update == 'true'
        id: check-existing
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if there's already an open PR for this version update
          LATEST="${{ steps.latest-version.outputs.version }}"
          PR_EXISTS=$(gh pr list --state open --label "ksr-cli-update" --json title | jq -r ".[] | select(.title | contains(\"$LATEST\")) | .title" | wc -l)
          
          if [ "$PR_EXISTS" -gt "0" ]; then
            echo "PR already exists for version $LATEST"
            echo "pr-exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found for version $LATEST"
            echo "pr-exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Also check for existing issues
          ISSUE_EXISTS=$(gh issue list --state open --label "ksr-cli-update" --json title | jq -r ".[] | select(.title | contains(\"$LATEST\")) | .title" | wc -l)
          
          if [ "$ISSUE_EXISTS" -gt "0" ]; then
            echo "Issue already exists for version $LATEST"
            echo "issue-exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing issue found for version $LATEST"
            echo "issue-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Issue for Manual Update
        if: steps.compare.outputs.needs-update == 'true' && steps.check-existing.outputs.pr-exists == 'false' && steps.check-existing.outputs.issue-exists == 'false' && github.event.inputs.dry-run != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          LATEST="${{ steps.latest-version.outputs.version }}"
          
          # Read release notes
          RELEASE_NOTES=""
          if [ -f release-notes.txt ]; then
            RELEASE_NOTES=$(cat release-notes.txt)
          fi
          
          # Create issue body
          cat > issue-body.md << EOF
          ## ksr-cli Update Available
          
          A new version of ksr-cli is available. The action currently uses **$CURRENT** but **$LATEST** is now available.
          
          ### Release Notes for $LATEST
          
          $RELEASE_NOTES
          
          ### Update Instructions
          
          To update ksr-cli in this action:
          
          1. Update the default \`cli-version\` in \`action.yml\` from \`$CURRENT\` to \`$LATEST\`
          2. Run the test workflows to ensure compatibility
          3. Update the README.md if there are any breaking changes
          
          ### Automated PR Alternative
          
          If you have a Personal Access Token (PAT) configured:
          1. Add a secret named \`WORKFLOW_TOKEN\` with a PAT that has \`repo\` and \`workflow\` permissions
          2. Update this workflow to use \`\${{ secrets.WORKFLOW_TOKEN }}\` instead of \`\${{ github.token }}\`
          
          ### Manual Update Command
          
          \`\`\`bash
          sed -i "s/default: '$CURRENT'/default: '$LATEST'/g" action.yml
          \`\`\`
          
          ---
          *This issue was automatically created by the ksr-cli version check workflow.*
          EOF
          
          # Create the issue
          gh issue create \
            --title "chore: update ksr-cli to $LATEST" \
            --body-file issue-body.md \
            --label "dependencies,ksr-cli-update,automated" \
            --assignee aywengo

      - name: Summary
        if: always()
        run: |
          echo "## ksr-cli Version Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Current version:** ${{ steps.current-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest version:** ${{ steps.latest-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update needed:** ${{ steps.compare.outputs.needs-update }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.compare.outputs.needs-update }}" = "true" ]; then
            if [ "${{ steps.check-existing.outputs.pr-exists }}" = "true" ]; then
              echo "- **Action:** PR already exists, skipping creation" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.check-existing.outputs.issue-exists }}" = "true" ]; then
              echo "- **Action:** Issue already exists, skipping creation" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ github.event.inputs.dry-run }}" = "true" ]; then
              echo "- **Action:** Dry run - no issue created" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Action:** Issue created for manual update" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Action:** No action needed - ksr-cli is up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note on Automated PRs" >> $GITHUB_STEP_SUMMARY
          echo "GitHub Actions default token cannot create PRs that trigger other workflows." >> $GITHUB_STEP_SUMMARY
          echo "To enable automated PR creation, configure a Personal Access Token (PAT) as described in the created issue." >> $GITHUB_STEP_SUMMARY

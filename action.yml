name: 'Schema Registry CI/CD with ksr-cli'
description: 'Automate Schema Registry operations in your CI/CD pipeline using the comprehensive ksr-cli tool'
author: 'Roman Melnyk'
branding:
  icon: 'database'
  color: 'blue'

inputs:
  operation:
    description: 'Operation to perform (validate, check-compatibility, deploy, compare, export, lint, generate-docs)'
    required: true
    
  registry-url:
    description: 'Schema Registry URL'
    required: false
    
  registry-type:
    description: 'Type of registry - ksr-cli supports all Confluent-compatible registries'
    required: false
    default: 'confluent'
    
  schemas-path:
    description: 'Path to schema files'
    required: false
    default: './schemas'
    
  schema-file:
    description: 'Single schema file path'
    required: false
    
  subject:
    description: 'Schema subject name'
    required: false
    
  subject-prefix:
    description: 'Prefix to add to all subjects'
    required: false
    default: ''
    
  compatibility-level:
    description: 'Compatibility level (BACKWARD, FORWARD, FULL, NONE)'
    required: false
    default: 'BACKWARD'
    
  schema-type:
    description: 'Schema type (avro, protobuf, json)'
    required: false
    default: 'avro'
    
  output-format:
    description: 'Output format (json, table, markdown)'
    required: false
    default: 'json'
    
  output-path:
    description: 'Output path for exports'
    required: false
    
  fail-on-error:
    description: 'Fail the action on any error'
    required: false
    default: 'true'
    
  dry-run:
    description: 'Perform a dry run without making changes'
    required: false
    default: 'false'
    
  create-subjects:
    description: 'Create subjects if they do not exist'
    required: false
    default: 'true'
    
  normalize-schemas:
    description: 'Normalize schemas before deployment'
    required: false
    default: 'true'
    
  include-versions:
    description: 'Include versions (all, latest)'
    required: false
    default: 'latest'
    
  rules-file:
    description: 'Path to linting rules file'
    required: false
    
  source-registry:
    description: 'Source registry URL for comparison'
    required: false
    
  target-registry:
    description: 'Target registry URL for comparison'
    required: false
    
  auth-method:
    description: 'Authentication method (basic, api-key, oauth)'
    required: false
    default: 'basic'
    
  username:
    description: 'Registry username'
    required: false
    
  password:
    description: 'Registry password'
    required: false
    
  api-key:
    description: 'API key for authentication'
    required: false
    
  api-secret:
    description: 'API secret for authentication'
    required: false
    
  token:
    description: 'OAuth token'
    required: false
    
  debug:
    description: 'Enable debug logging'
    required: false
    default: 'false'
    
  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'
    
  cli-version:
    description: 'ksr-cli version to use (e.g., v0.2.3, latest)'
    required: false
    default: 'v0.2.3'

outputs:
  validation-result:
    description: 'Result of schema validation'
    value: ${{ steps.execute.outputs.validation-result }}
    
  compatibility-result:
    description: 'Result of compatibility check'
    value: ${{ steps.execute.outputs.compatibility-result }}
    
  deployed-schemas:
    description: 'List of deployed schemas'
    value: ${{ steps.execute.outputs.deployed-schemas }}
    
  schema-diff:
    description: 'Differences between schemas'
    value: ${{ steps.execute.outputs.schema-diff }}
    
  export-path:
    description: 'Path to exported schemas'
    value: ${{ steps.execute.outputs.export-path }}
    
  operation-status:
    description: 'Status of the operation (success/failure)'
    value: ${{ steps.execute.outputs.operation-status }}
    
  error-message:
    description: 'Error message if operation failed'
    value: ${{ steps.execute.outputs.error-message }}

runs:
  using: 'composite'
  steps:
    - name: Setup ksr-cli (Kafka Schema Registry CLI)
      id: setup
      shell: bash
      run: |
        echo "Setting up ksr-cli (Kafka Schema Registry CLI)..."
        
        # Determine OS and architecture
        OS_RAW=$(uname -s)
        ARCH=$(uname -m)
        
        # Map OS to the correct naming convention used by ksr-cli releases
        case $OS_RAW in
          Linux)
            OS="linux"
            ;;
          Darwin)
            OS="darwin"
            ;;
          CYGWIN*|MINGW*|MSYS*)
            OS="windows"
            ;;
          *)
            echo "Unsupported operating system: $OS_RAW"
            exit 1
            ;;
        esac
        
        # Map architecture to the correct naming convention
        case $ARCH in
          x86_64)
            ARCH="amd64"
            ;;
          aarch64|arm64)
            ARCH="arm64"
            ;;
          *)
            echo "Unsupported architecture: $ARCH"
            exit 1
            ;;
        esac
        
        # Set CLI version
        CLI_VERSION="${{ inputs.cli-version }}"
        if [ "$CLI_VERSION" == "latest" ]; then
          CLI_VERSION=$(curl -s https://api.github.com/repos/aywengo/ksr-cli/releases/latest | jq -r '.tag_name')
          if [ -z "$CLI_VERSION" ] || [ "$CLI_VERSION" == "null" ]; then
            echo "Failed to fetch latest version, falling back to default"
            CLI_VERSION="v0.2.3"
          fi
        fi
        
        # Construct filename based on OS - Windows includes .exe in the archive name
        if [ "$OS" == "windows" ]; then
          FILENAME="ksr-cli-${OS}-${ARCH}.exe.tar.gz"
          BINARY_NAME="ksr-cli.exe"
        else
          FILENAME="ksr-cli-${OS}-${ARCH}.tar.gz"
          BINARY_NAME="ksr-cli"
        fi
        
        # Construct download URL
        CLI_URL="https://github.com/aywengo/ksr-cli/releases/download/${CLI_VERSION}/${FILENAME}"
        echo "Downloading ksr-cli from: $CLI_URL"
        
        # Download with better error handling
        if ! wget -q "$CLI_URL" -O "ksr-cli.tar.gz"; then
          echo "Failed to download from: $CLI_URL"
          echo "Attempting to list available assets for version $CLI_VERSION..."
          curl -s "https://api.github.com/repos/aywengo/ksr-cli/releases/tags/${CLI_VERSION}" | jq -r '.assets[].name' || echo "Failed to list assets"
          exit 1
        fi
        
        # Extract the tar.gz file (all platforms use tar.gz)
        tar -xzf "ksr-cli.tar.gz"
        
        chmod +x "$BINARY_NAME"
        
        # Move to appropriate location based on OS
        if [ "$OS" == "windows" ]; then
          # On Windows in GitHub Actions, use a location that's in PATH
          mkdir -p /usr/local/bin
          mv "$BINARY_NAME" /usr/local/bin/ksr-cli
        else
          sudo mv "$BINARY_NAME" /usr/local/bin/
        fi
        
        rm "ksr-cli.tar.gz"
        
        # Verify installation
        ksr-cli --version
        
        # Set up authentication for ksr-cli
        if [ "${{ inputs.auth-method }}" == "basic" ] && [ ! -z "${{ inputs.username }}" ]; then
          echo "Setting up basic authentication for ksr-cli..."
          export KSR_USERNAME="${{ inputs.username }}"
          export KSR_PASSWORD="${{ inputs.password }}"
        elif [ "${{ inputs.auth-method }}" == "api-key" ] && [ ! -z "${{ inputs.api-key }}" ]; then
          echo "Setting up API key authentication for ksr-cli..."
          export KSR_API_KEY="${{ inputs.api-key }}"
          if [ ! -z "${{ inputs.api-secret }}" ]; then
            export KSR_API_SECRET="${{ inputs.api-secret }}"
          fi
        elif [ "${{ inputs.auth-method }}" == "oauth" ] && [ ! -z "${{ inputs.token }}" ]; then
          echo "Setting up OAuth authentication for ksr-cli..."
          export KSR_TOKEN="${{ inputs.token }}"
        fi
        
        # Set registry URL
        if [ ! -z "${{ inputs.registry-url }}" ]; then
          export KSR_REGISTRY_URL="${{ inputs.registry-url }}"
        fi
        
    - name: Execute Operation with ksr-cli
      id: execute
      shell: bash
      run: |
        echo "Executing operation: ${{ inputs.operation }} with ksr-cli"
        
        # Set common CLI options
        CLI_OPTS=""
        
        # Add authentication options
        if [ ! -z "${{ inputs.username }}" ]; then
          CLI_OPTS="$CLI_OPTS --user ${{ inputs.username }} --pass ${{ inputs.password }}"
        elif [ ! -z "${{ inputs.api-key }}" ]; then
          CLI_OPTS="$CLI_OPTS --api-key ${{ inputs.api-key }}"
        fi
        
        # Add registry URL if provided
        if [ ! -z "${{ inputs.registry-url }}" ]; then
          CLI_OPTS="$CLI_OPTS --registry-url ${{ inputs.registry-url }}"
        fi
        
        # Add output format
        if [ ! -z "${{ inputs.output-format }}" ]; then
          CLI_OPTS="$CLI_OPTS --output ${{ inputs.output-format }}"
        fi
        
        # Add debug/verbose flags
        if [ "${{ inputs.debug }}" == "true" ]; then
          export KSR_LOG_LEVEL=debug
        fi
        if [ "${{ inputs.verbose }}" == "true" ]; then
          CLI_OPTS="$CLI_OPTS --verbose"
        fi
        
        # Execute operation using ksr-cli
        case "${{ inputs.operation }}" in
          validate)
            echo "Validating schemas in ${{ inputs.schemas-path }}"
            
            # Initialize result file
            echo '{"operation": "validate", "status": "running", "schemas": []}' > operation-result.json
            
            # Validate each schema file using ksr-cli or basic validation
            validation_failed=false
            total_schemas=0
            valid_schemas=0
            
            for schema_file in ${{ inputs.schemas-path }}/*.{avsc,json,proto}; do
              if [ -f "$schema_file" ]; then
                total_schemas=$((total_schemas + 1))
                echo "Validating $schema_file"
                
                # Validate .avsc and .json files
                if [[ "$schema_file" =~ \.(avsc|json)$ ]]; then
                  # First check if it's valid JSON
                  if ! jq . "$schema_file" >/dev/null 2>&1; then
                    echo "✗ $schema_file is invalid JSON"
                    validation_failed=true
                    
                    # Add to results
                    jq --arg file "$schema_file" --arg status "invalid" --arg error "Invalid JSON format" \
                      '.schemas += [{"file": $file, "status": $status, "error": $error}]' \
                      operation-result.json > tmp.json && mv tmp.json operation-result.json
                  else
                    # For .avsc files, do additional Avro schema validation
                    if [[ "$schema_file" =~ \.avsc$ ]]; then
                      # Check if it has required Avro schema fields
                      schema_type=$(jq -r '.type // empty' "$schema_file")
                      if [ -z "$schema_type" ]; then
                        echo "✗ $schema_file missing required 'type' field"
                        validation_failed=true
                        
                        # Add to results
                        jq --arg file "$schema_file" --arg status "invalid" --arg error "Missing required 'type' field" \
                          '.schemas += [{"file": $file, "status": $status, "error": $error}]' \
                          operation-result.json > tmp.json && mv tmp.json operation-result.json
                      elif [ "$schema_type" == "record" ]; then
                        # For record types, check required fields
                        schema_name=$(jq -r '.name // empty' "$schema_file")
                        schema_fields=$(jq -r '.fields // empty' "$schema_file")
                        
                        if [ -z "$schema_name" ]; then
                          echo "✗ $schema_file record missing required 'name' field"
                          validation_failed=true
                          
                          # Add to results
                          jq --arg file "$schema_file" --arg status "invalid" --arg error "Record missing required 'name' field" \
                            '.schemas += [{"file": $file, "status": $status, "error": $error}]' \
                            operation-result.json > tmp.json && mv tmp.json operation-result.json
                        elif [ -z "$schema_fields" ] || [ "$schema_fields" == "null" ]; then
                          echo "✗ $schema_file record missing required 'fields' array"
                          validation_failed=true
                          
                          # Add to results
                          jq --arg file "$schema_file" --arg status "invalid" --arg error "Record missing required 'fields' array" \
                            '.schemas += [{"file": $file, "status": $status, "error": $error}]' \
                            operation-result.json > tmp.json && mv tmp.json operation-result.json
                        else
                          echo "✓ $schema_file is valid"
                          valid_schemas=$((valid_schemas + 1))
                          
                          # Add to results
                          jq --arg file "$schema_file" --arg status "valid" \
                            '.schemas += [{"file": $file, "status": $status}]' \
                            operation-result.json > tmp.json && mv tmp.json operation-result.json
                        fi
                      else
                        # For non-record types, basic validation is sufficient
                        echo "✓ $schema_file is valid"
                        valid_schemas=$((valid_schemas + 1))
                        
                        # Add to results
                        jq --arg file "$schema_file" --arg status "valid" \
                          '.schemas += [{"file": $file, "status": $status}]' \
                          operation-result.json > tmp.json && mv tmp.json operation-result.json
                      fi
                    else
                      # For .json files, basic JSON validation is sufficient
                      echo "✓ $schema_file is valid JSON"
                      valid_schemas=$((valid_schemas + 1))
                      
                      # Add to results
                      jq --arg file "$schema_file" --arg status "valid" \
                        '.schemas += [{"file": $file, "status": $status}]' \
                        operation-result.json > tmp.json && mv tmp.json operation-result.json
                    fi
                  fi
                else
                  echo "✓ $schema_file (basic validation)"
                  valid_schemas=$((valid_schemas + 1))
                  
                  # Add to results
                  jq --arg file "$schema_file" --arg status "valid" \
                    '.schemas += [{"file": $file, "status": $status}]' \
                    operation-result.json > tmp.json && mv tmp.json operation-result.json
                fi
              fi
            done
            
            # Update final status
            if [ "$validation_failed" = true ]; then
              jq --arg status "failure" --arg total "$total_schemas" --arg valid "$valid_schemas" \
                '.status = $status | .summary = {"total": ($total | tonumber), "valid": ($valid | tonumber), "invalid": (($total | tonumber) - ($valid | tonumber))}' \
                operation-result.json > tmp.json && mv tmp.json operation-result.json
              
              # Set a marker for the process results step to know validation failed
              echo "VALIDATION_STATUS=failure" >> $GITHUB_ENV
              
              # Only exit with error if fail-on-error is true
              if [ "${{ inputs.fail-on-error }}" == "true" ]; then
                exit 1
              fi
            else
              jq --arg status "success" --arg total "$total_schemas" --arg valid "$valid_schemas" \
                '.status = $status | .summary = {"total": ($total | tonumber), "valid": ($valid | tonumber), "invalid": 0}' \
                operation-result.json > tmp.json && mv tmp.json operation-result.json
              
              echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
            fi
            ;;
            
          check-compatibility)
            if [ ! -z "${{ inputs.schema-file }}" ] && [ ! -z "${{ inputs.subject }}" ]; then
              echo "Checking compatibility for subject: ${{ inputs.subject }}"
              if ksr-cli check compatibility "${{ inputs.subject }}" --file "${{ inputs.schema-file }}" $CLI_OPTS; then
                echo "COMPATIBILITY_STATUS=success" >> $GITHUB_ENV
              else
                echo "COMPATIBILITY_STATUS=failure" >> $GITHUB_ENV
                if [ "${{ inputs.fail-on-error }}" == "true" ]; then
                  exit 1
                fi
              fi
            else
              echo "Error: Both schema-file and subject are required for compatibility check"
              echo "COMPATIBILITY_STATUS=failure" >> $GITHUB_ENV
              if [ "${{ inputs.fail-on-error }}" == "true" ]; then
                exit 1
              fi
            fi
            ;;
            
          deploy)
            echo "Deploying schemas from ${{ inputs.schemas-path }}"
            if [ "${{ inputs.dry-run }}" == "true" ]; then
              echo "Dry run mode - schemas will not be deployed"
            fi
            
            for schema_file in ${{ inputs.schemas-path }}/*.{avsc,json}; do
              if [ -f "$schema_file" ]; then
                # Extract subject name from filename
                subject=$(basename "$schema_file" | sed 's/\.[^.]*$//')
                if [ ! -z "${{ inputs.subject-prefix }}" ]; then
                  subject="${{ inputs.subject-prefix }}$subject"
                fi
                
                echo "Deploying schema for subject: $subject"
                
                # Set schema type if specified
                schema_type_opt=""
                if [ "${{ inputs.schema-type }}" == "json" ]; then
                  schema_type_opt="--schema-type JSON"
                elif [ "${{ inputs.schema-type }}" == "protobuf" ]; then
                  schema_type_opt="--schema-type PROTOBUF"
                fi
                
                if [ "${{ inputs.dry-run }}" == "false" ]; then
                  ksr-cli create schema "$subject" --file "$schema_file" $schema_type_opt $CLI_OPTS
                else
                  echo "Dry run: Would deploy $schema_file as subject $subject"
                fi
              fi
            done
            ;;
            
          compare)
            echo "Comparing registries is not directly supported by ksr-cli"
            echo "Use export operation on both registries and compare the outputs"
            exit 1
            ;;
            
          export)
            output_path="${{ inputs.output-path }}"
            if [ -z "$output_path" ]; then
              output_path="./exported-schemas.json"
            fi
            
            echo "Exporting schemas to $output_path"
            
            if [ "${{ inputs.include-versions }}" == "all" ]; then
              ksr-cli export subjects --all-versions -f "$output_path" $CLI_OPTS
            else
              ksr-cli export subjects -f "$output_path" $CLI_OPTS
            fi
            
            echo "export-path=$output_path" >> $GITHUB_OUTPUT
            ;;
            
          lint)
            echo "Schema linting with custom rules is not directly supported by ksr-cli"
            echo "ksr-cli performs basic validation during schema operations"
            # Fallback to validation
            echo "Performing basic schema validation instead..."
            for schema_file in ${{ inputs.schemas-path }}/*.{avsc,json}; do
              if [ -f "$schema_file" ]; then
                echo "Validating $schema_file"
                subject=$(basename "$schema_file" | sed 's/\.[^.]*$//')
                ksr-cli check compatibility "$subject" --file "$schema_file" $CLI_OPTS || echo "Validation failed for $schema_file"
              fi
            done
            ;;
            
          generate-docs)
            echo "Documentation generation is not directly supported by ksr-cli"
            echo "Use the export functionality and generate docs from the exported schemas"
            exit 1
            ;;
            
          *)
            echo "Unknown operation: ${{ inputs.operation }}"
            exit 1
            ;;
        esac
        
    - name: Process Results
      if: always()
      shell: bash
      run: |
        # Determine operation status based on the operation type and internal logic
        case "${{ inputs.operation }}" in
          validate)
            # Use the validation status set by the validation logic
            if [ "$VALIDATION_STATUS" == "failure" ]; then
              OPERATION_STATUS="failure"
            else
              OPERATION_STATUS="success"
            fi
            ;;
          check-compatibility)
            # Use the compatibility status set by the compatibility logic
            if [ "$COMPATIBILITY_STATUS" == "failure" ]; then
              OPERATION_STATUS="failure"
            else
              OPERATION_STATUS="success"
            fi
            ;;
          *)
            # For other operations, use the GitHub Actions step outcome
            OPERATION_STATUS="${{ steps.execute.outcome }}"
            ;;
        esac
        
        echo "Operation completed with status: $OPERATION_STATUS"
        echo "operation-status=$OPERATION_STATUS" >> $GITHUB_OUTPUT
        
        # Set default values for outputs
        echo "validation-result=" >> $GITHUB_OUTPUT
        echo "compatibility-result=" >> $GITHUB_OUTPUT
        echo "deployed-schemas=" >> $GITHUB_OUTPUT
        echo "schema-diff=" >> $GITHUB_OUTPUT
        
        # Set operation-specific outputs based on the operation performed
        case "${{ inputs.operation }}" in
          validate)
            if [ "$OPERATION_STATUS" == "success" ]; then
              echo "validation-result=All schemas are valid" >> $GITHUB_OUTPUT
            else
              echo "validation-result=Schema validation failed" >> $GITHUB_OUTPUT
              echo "error-message=One or more schemas failed validation" >> $GITHUB_OUTPUT
            fi
            ;;
            
          check-compatibility)
            if [ "$OPERATION_STATUS" == "success" ]; then
              echo "compatibility-result=Schema is compatible" >> $GITHUB_OUTPUT
            else
              echo "compatibility-result=Schema is not compatible" >> $GITHUB_OUTPUT
              echo "error-message=Schema compatibility check failed" >> $GITHUB_OUTPUT
            fi
            ;;
            
          deploy)
            if [ "$OPERATION_STATUS" == "success" ]; then
              # Count deployed schemas
              schema_count=$(find "${{ inputs.schemas-path }}" -name "*.avsc" -o -name "*.json" | wc -l)
              echo "deployed-schemas=Successfully deployed $schema_count schemas" >> $GITHUB_OUTPUT
            else
              echo "deployed-schemas=" >> $GITHUB_OUTPUT
              echo "error-message=Schema deployment failed" >> $GITHUB_OUTPUT
            fi
            ;;
            
          export)
            # export-path is already set in the execute step
            if [ "$OPERATION_STATUS" != "success" ]; then
              echo "error-message=Schema export failed" >> $GITHUB_OUTPUT
            fi
            ;;
            
          *)
            if [ "$OPERATION_STATUS" != "success" ]; then
              echo "error-message=Operation ${{ inputs.operation }} failed" >> $GITHUB_OUTPUT
            fi
            ;;
        esac
        
        # Check if we should fail
        if [ "${{ inputs.fail-on-error }}" == "true" ] && [ "$OPERATION_STATUS" != "success" ]; then
          echo "Operation failed and fail-on-error is enabled!"
          exit 1
        fi